name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'

    - name: Install Node dependencies
      run: |
        npm install

    - name: Run Solidity tests
      run: |
        npx hardhat test
        npx hardhat coverage

    - name: Run Python tests
      run: |
        pytest backend/tests --cov=backend
        pytest backend/tests/test_telegram_bot.py --cov=backend.telegram_bot

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  deploy-contracts:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'

    - name: Install dependencies
      run: |
        npm install

    - name: Deploy proxy contracts
      env:
        INFURA_PROJECT_ID: ${{ secrets.INFURA_PROJECT_ID }}
        DEPLOYER_PRIVATE_KEY: ${{ secrets.DEPLOYER_PRIVATE_KEY }}
        ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
      run: |
        npx hardhat run scripts/deploy_proxies.js --network sepolia
        npx hardhat verify --network sepolia $(cat .deployed/ProxyAdmin.address)
        npx hardhat verify --network sepolia $(cat .deployed/UniversityAccessControlProxy.address)
        npx hardhat verify --network sepolia $(cat .deployed/CourseManagementProxy.address)
        npx hardhat verify --network sepolia $(cat .deployed/GradeManagementProxy.address)
        npx hardhat verify --network sepolia $(cat .deployed/ScheduleManagementProxy.address)
        npx hardhat verify --network sepolia $(cat .deployed/StatisticsTrackerProxy.address)

  build-and-deploy:
    needs: deploy-contracts
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: university-blockchain-tracker
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Deploy to ECS
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: university-blockchain-tracker
        IMAGE_TAG: ${{ github.sha }}
      run: |
        aws ecs update-service --cluster university-blockchain --service university-blockchain-service --force-new-deployment
